name: Build and publish Management Center RHEL image

on:
  workflow_dispatch:
  push:
    tags:
      - "v5.*"

jobs:
  build:
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    env:
      SCAN_REGISTRY: "quay.io"
      TIMEOUT_IN_MINS: 120
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set release version and RHEL image as environment variables
        run: |
          RELEASE_VERSION=${GITHUB_REF:11}
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "RHEL_IMAGE_TAG=${SCAN_REGISTRY}/redhat-isv-containers/${{ secrets.RHEL_PROJECT_ID }}:${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Print Release Version
        run: echo ${{ env.RELEASE_VERSION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ${{ env.SCAN_REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.SCAN_REGISTRY }}
          username: ${{ secrets.SCAN_REGISTRY_USER }}
          password: ${{ secrets.SCAN_REGISTRY_PASSWORD }}

      - name: Build and push docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/s390x
          tags: ${{ env.RHEL_IMAGE_TAG }}
          push: true
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install preflight tool
        run: |
          PREFLIGHT_VERSION=$(curl -s https://api.github.com/repos/redhat-openshift-ecosystem/openshift-preflight/releases/latest | grep 'tag_name' | cut -d\" -f4)
          wget https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/download/${PREFLIGHT_VERSION}/preflight-linux-amd64
          chmod +x preflight-linux-amd64

      - name: Run preflight scan
        run: >-
          ./preflight-linux-amd64 check container ${{ env.RHEL_IMAGE_TAG }}
          --pyxis-api-token=${{ secrets.RHEL_API_KEY }}
          --certification-project-id=${{ secrets.RHEL_PROJECT_ID }}
          --docker-config=$HOME/.docker/config.json
          --submit

      - name: Wait for scan to complete
        run: |
          source .github/scripts/publish-rhel.sh
          
          wait_for_container_scan "${{ secrets.RHEL_PROJECT_ID }}" "${{ env.RELEASE_VERSION }}" "${{ secrets.RHEL_API_KEY }}" "${{ env.TIMEOUT_IN_MINS }}"

      - name: Publish the Management Center image
        run: |
          source .github/scripts/publish-rhel.sh

          publish_the_image "${{ secrets.RHEL_PROJECT_ID }}" "${{ env.RELEASE_VERSION }}" "${{ secrets.RHEL_API_KEY }}"
          wait_for_container_publish "${{ secrets.RHEL_PROJECT_ID }}" "${{ env.RELEASE_VERSION }}" "${{ secrets.RHEL_API_KEY }}" "${{ env.TIMEOUT_IN_MINS }}"
